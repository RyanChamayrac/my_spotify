{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  topTracks: [],\n  topTracksId: '',\n  tracks: '',\n  albums: '',\n  topAlbum: [],\n  artist: {}\n};\nexport const artistTrackSlice = createSlice({\n  name: 'topTracks',\n  initialState,\n  reducers: {\n    setTopTracks: (state, action) => {\n      state.topTracks = [];\n      action.payload.tracks.forEach(item => {\n        state.topTracks.push(item);\n      });\n    },\n    setAlbums: (state, action) => {\n      state.topAlbum = [];\n      action.payload.items.forEach(item => {\n        state.topAlbum.push(item);\n      });\n    },\n    setTopAlbum: (state, action) => {\n      state.albums = action.payload;\n    },\n    setCurrentTopTrackId: (state, action) => {\n      state.topTracksId = action.payload;\n    },\n    setArtist: (state, action) => {\n      state.artist = action.payload;\n    }\n  }\n});\nexport const {\n  setTopTracks,\n  setArtist,\n  setAlbums\n} = artistTrackSlice.actions;\nexport const selectData = state => state.artistTrack.topTracks;\nexport const selectAlbum = state => state.artistTrack.topAlbum;\nexport const selectArtist = state => state.artistTrack.artist;\nexport const setTracks = (accessToken, artistId) => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/artists/' + artistId + '/top-tracks?market=FR', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    dispatch(setTopTracks(data));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {}\n    }\n  });\n};\nexport const setAlbumName = (accessToken, artistId) => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/artists/' + artistId + '/albums', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    dispatch(setAlbums(data));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {}\n    }\n  });\n};\nexport default artistTrackSlice.reducer;","map":{"version":3,"sources":["/home/ryan/Projets/myspotify/Projets/src/components/ArtistPage/trackArtistSlice.tsx"],"names":["createSlice","initialState","topTracks","topTracksId","tracks","albums","topAlbum","artist","artistTrackSlice","name","reducers","setTopTracks","state","action","payload","forEach","item","push","setAlbums","items","setTopAlbum","setCurrentTopTrackId","setArtist","actions","selectData","artistTrack","selectAlbum","selectArtist","setTracks","accessToken","artistId","dispatch","myHeaders","Headers","append","fetch","method","headers","then","response","json","data","catch","error","console","log","XMLHttpRequest","status","setAlbumName","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../redux/store';\n\ninterface ArtistTrackState {\n    topTracks: any[];\n    topTracksId: string,\n    tracks: any,\n    albums: any,\n    topAlbum: any[];\n    artist: any;\n}\n\nconst initialState: ArtistTrackState = {\n    topTracks: [],\n    topTracksId: '',\n    tracks: '',\n    albums: '',\n    topAlbum: [],\n    artist: {}\n};\n\nexport const artistTrackSlice = createSlice({\n    name: 'topTracks',\n    initialState,\n    reducers: {\n        setTopTracks: (state, action: PayloadAction<any>) => {\n            state.topTracks = [];\n            action.payload.tracks.forEach((item:any) => {\n                state.topTracks.push(item)\n            })\n        },\n        setAlbums: (state, action: PayloadAction<any>) => {\n            state.topAlbum = [];\n            action.payload.items.forEach((item:any) => {\n                state.topAlbum.push(item)\n            })\n        },\n        setTopAlbum: (state, action: PayloadAction<string>) => {\n            state.albums = action.payload;\n        },\n        setCurrentTopTrackId: (state, action: PayloadAction<string>) => {\n            state.topTracksId = action.payload;\n        },\n        setArtist: (state, action: PayloadAction<any>) => {\n            state.artist = action.payload;\n        }\n    },\n});\n\nexport const { setTopTracks, setArtist, setAlbums } = artistTrackSlice.actions;\n\nexport const selectData = (state: RootState) => state.artistTrack.topTracks;\nexport const selectAlbum = (state: RootState) => state.artistTrack.topAlbum;\nexport const selectArtist = (state: RootState) => state.artistTrack.artist;\n\nexport const setTracks = (accessToken: string, artistId: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/artists/' + artistId + '/top-tracks?market=FR', {\n        method: 'GET',\n        headers: myHeaders,\n    }).then(response => response.json())\n        .then((data) => {\n            dispatch(setTopTracks(data));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n            }\n        }\n    });\n};\n\nexport const setAlbumName = (accessToken: string, artistId: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/artists/' + artistId + '/albums', {\n        method: 'GET',\n        headers: myHeaders,\n    }).then(response => response.json())\n        .then((data) => {\n            dispatch(setAlbums(data));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n            }\n        }\n    });\n};\n\nexport default artistTrackSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}