{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { setLoggedIn } from '../authorization/AuthorizationSlice';\nconst initialState = {\n  userName: '',\n  product: '',\n  userImage: ''\n};\nexport const userSlice = createSlice({\n  name: 'Home',\n  initialState,\n  reducers: {\n    setUserName: (state, action) => {\n      state.userName = action.payload;\n    },\n    setProduct: (state, action) => {\n      state.product = action.payload;\n    },\n    setUserImage: (state, action) => {\n      state.userImage = action.payload;\n    }\n  }\n});\nexport const {\n  setUserName,\n  setProduct,\n  setUserImage\n} = userSlice.actions;\nexport const selectUserName = state => state.user.userName;\nexport const selectProduct = state => state.user.product;\nexport const selectUserImage = state => state.user.userImage;\nexport const setUserProfileAsync = accessToken => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/me', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    dispatch(setUserName(data.display_name));\n    dispatch(setProduct(data.product));\n    dispatch(setUserImage(data.images[0].url));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {\n        dispatch(setLoggedIn(false));\n      }\n    }\n  });\n};\nexport default userSlice.reducer;","map":{"version":3,"sources":["/home/ryan/Projets/myspotify/Projets/src/components/user/UserSlice.tsx"],"names":["createSlice","setLoggedIn","initialState","userName","product","userImage","userSlice","name","reducers","setUserName","state","action","payload","setProduct","setUserImage","actions","selectUserName","user","selectProduct","selectUserImage","setUserProfileAsync","accessToken","dispatch","myHeaders","Headers","append","fetch","method","headers","then","response","json","data","display_name","images","url","catch","error","console","log","XMLHttpRequest","status","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SACIC,WADJ,QAEO,qCAFP;AAUA,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE,EADkB;AAE5BC,EAAAA,OAAO,EAAE,EAFmB;AAG5BC,EAAAA,SAAS,EAAE;AAHiB,CAAhC;AAMA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;AACjCO,EAAAA,IAAI,EAAE,MAD2B;AAEjCL,EAAAA,YAFiC;AAGjCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AACnDD,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACH,KAHK;AAINC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAA0C;AAClDD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACC,OAAvB;AACH,KANK;AAONE,IAAAA,YAAY,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AACpDD,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACC,OAAzB;AACH;AATK;AAHuB,CAAD,CAA7B;AAgBP,OAAO,MAAM;AAAEH,EAAAA,WAAF;AAAeI,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,IAA4CR,SAAS,CAACS,OAA5D;AAEP,OAAO,MAAMC,cAAc,GAAIN,KAAD,IAAsBA,KAAK,CAACO,IAAN,CAAWd,QAAxD;AACP,OAAO,MAAMe,aAAa,GAAIR,KAAD,IAAsBA,KAAK,CAACO,IAAN,CAAWb,OAAvD;AACP,OAAO,MAAMe,eAAe,GAAIT,KAAD,IAAsBA,KAAK,CAACO,IAAN,CAAWZ,SAAzD;AAEP,OAAO,MAAMe,mBAAmB,GAAIC,WAAD,IAAmCC,QAAQ,IAAI;AAC9E,QAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,YAAYJ,WAA9C;AAEAK,EAAAA,KAAK,CAAC,+BAAD,EAAkC;AACnCC,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAEL;AAF0B,GAAlC,CAAL,CAGGM,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIKF,IAJL,CAIWG,IAAD,IAAU;AACZV,IAAAA,QAAQ,CAACb,WAAW,CAACuB,IAAI,CAACC,YAAN,CAAZ,CAAR;AACAX,IAAAA,QAAQ,CAACT,UAAU,CAACmB,IAAI,CAAC5B,OAAN,CAAX,CAAR;AACAkB,IAAAA,QAAQ,CAACR,YAAY,CAACkB,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,GAAhB,CAAb,CAAR;AACH,GARL,EAQOC,KARP,CAQcC,KAAD,IAAW;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,QAAIA,KAAK,YAAYG,cAArB,EAAqC;AACjC,UAAIH,KAAK,CAACI,MAAN,KAAiB,GAArB,EAA0B;AACtBnB,QAAAA,QAAQ,CAACrB,WAAW,CAAC,KAAD,CAAZ,CAAR;AACH;AACJ;AACJ,GAfD;AAgBH,CApBM;AAsBP,eAAeK,SAAS,CAACoC,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../redux/store';\nimport {\n    setLoggedIn\n} from '../authorization/AuthorizationSlice';\n\ninterface UserState {\n    userName: string,\n    product: string\n    userImage: string\n}\n\nconst initialState: UserState = {\n    userName: '',\n    product: '',\n    userImage: ''\n};\n\nexport const userSlice = createSlice({\n    name: 'Home',\n    initialState,\n    reducers: {\n        setUserName: (state, action: PayloadAction<string>) => {\n            state.userName = action.payload;\n        },\n        setProduct: (state, action: PayloadAction<string>) => {\n            state.product = action.payload;\n        },\n        setUserImage: (state, action: PayloadAction<string>) => {\n            state.userImage = action.payload;\n        }\n    },\n});\n\nexport const { setUserName, setProduct, setUserImage } = userSlice.actions;\n\nexport const selectUserName = (state: RootState) => state.user.userName;\nexport const selectProduct = (state: RootState) => state.user.product;\nexport const selectUserImage = (state: RootState) => state.user.userImage;\n\nexport const setUserProfileAsync = (accessToken: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: myHeaders,\n    }).then(response => response.json())\n        .then((data) => {\n            dispatch(setUserName(data.display_name));\n            dispatch(setProduct(data.product));\n            dispatch(setUserImage(data.images[0].url));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n                dispatch(setLoggedIn(false));\n            }\n        }\n    });\n};\n\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}