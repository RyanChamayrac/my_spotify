{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  playlists: [],\n  currentPlaylist: {},\n  playlistsTracks: []\n};\nexport const playlistsSlice = createSlice({\n  name: 'Playlists',\n  initialState,\n  reducers: {\n    setPlaylist: (state, action) => {\n      state.playlists = [];\n      action.payload.playlists.items.forEach(item => {\n        state.playlists.push(item);\n      });\n    },\n    setUserPlaylist: (state, action) => {\n      state.playlists = [];\n      action.payload.items.forEach(item => {\n        state.playlists.push(item);\n      });\n    },\n    setCurrentPlaylist: (state, action) => {\n      state.currentPlaylist = action.payload;\n    },\n    setTracks: (state, action) => {\n      state.playlistsTracks = [];\n      action.payload.items.forEach(item => {\n        state.playlistsTracks.push(item.track);\n      });\n    }\n  }\n});\nexport const {\n  setPlaylist,\n  setUserPlaylist,\n  setTracks,\n  setCurrentPlaylist\n} = playlistsSlice.actions;\nexport const selectPlaylists = state => state.playlists.playlists;\nexport const selectPlaylistTracks = state => state.playlists.playlistsTracks;\nexport const selectCurrentPlaylist = state => state.playlists.currentPlaylist;\nexport const setPlaylists = accessToken => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/browse/featured-playlists', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    dispatch(setPlaylist(data));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {}\n    }\n  });\n};\nexport const setPlaylistTracks = (accessToken, playlistId) => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/playlists/' + playlistId + '/tracks?market=FR', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    dispatch(setTracks(data));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {}\n    }\n  });\n};\nexport const setUserPlaylists = accessToken => dispatch => {\n  const myHeaders = new Headers();\n  myHeaders.append('Authorization', 'Bearer ' + accessToken);\n  fetch('https://api.spotify.com/v1/me/playlists', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(response => response.json()).then(data => {\n    dispatch(setUserPlaylist(data));\n  }).catch(error => {\n    console.log(error);\n\n    if (error instanceof XMLHttpRequest) {\n      if (error.status === 401) {}\n    }\n  });\n};\nexport default playlistsSlice.reducer;","map":{"version":3,"sources":["/home/ryan/Projets/myspotify/Projets/src/components/playlists/PlaylistsSlice.tsx"],"names":["createSlice","initialState","playlists","currentPlaylist","playlistsTracks","playlistsSlice","name","reducers","setPlaylist","state","action","payload","items","forEach","item","push","setUserPlaylist","setCurrentPlaylist","setTracks","track","actions","selectPlaylists","selectPlaylistTracks","selectCurrentPlaylist","setPlaylists","accessToken","dispatch","myHeaders","Headers","append","fetch","method","headers","then","response","json","data","console","log","catch","error","XMLHttpRequest","status","setPlaylistTracks","playlistId","setUserPlaylists","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../redux/store';\n\ninterface PlaylistsState {\n    playlists: any[];\n    currentPlaylist: any;\n    playlistsTracks: any[];\n}\n\nconst initialState: PlaylistsState = {\n    playlists: [],\n    currentPlaylist: {},\n    playlistsTracks: []\n};\n\nexport const playlistsSlice = createSlice({\n    name: 'Playlists',\n    initialState,\n    reducers: {\n        setPlaylist: (state, action: PayloadAction<any>) => {\n            state.playlists = []\n            action.payload.playlists.items.forEach((item: any) => {\n                state.playlists.push(item);\n            })\n        },\n        setUserPlaylist: (state, action: PayloadAction<any>) => {\n            state.playlists = []\n            action.payload.items.forEach((item: any) => {\n                state.playlists.push(item);\n            })\n        },\n        setCurrentPlaylist: (state, action: PayloadAction<any>) => {\n            state.currentPlaylist = action.payload;\n        },\n        setTracks: (state, action: PayloadAction<any>) => {\n            state.playlistsTracks = [];\n            action.payload.items.forEach((item: any) => {\n                state.playlistsTracks.push(item.track);\n            })\n        }\n    },\n});\n\nexport const { setPlaylist, setUserPlaylist, setTracks, setCurrentPlaylist } = playlistsSlice.actions;\n\nexport const selectPlaylists = (state: RootState) => state.playlists.playlists;\nexport const selectPlaylistTracks = (state: RootState) => state.playlists.playlistsTracks;\nexport const selectCurrentPlaylist = (state: RootState) => state.playlists.currentPlaylist;\n\nexport const setPlaylists = (accessToken: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/browse/featured-playlists', {\n        method: 'GET',\n        headers: myHeaders,\n    }).then(response => response.json())\n        .then((data) => {\n            console.log(data);\n            dispatch(setPlaylist(data));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n\n            }\n        }\n    });\n}\n\nexport const setPlaylistTracks = (accessToken: string, playlistId: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/playlists/' + playlistId + '/tracks?market=FR', {\n        method: 'GET',\n        headers: myHeaders\n    }).then(response => response.json())\n        .then((data) => {\n            dispatch(setTracks(data));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n\n            }\n        }\n    });\n}\n\nexport const setUserPlaylists = (accessToken: string): AppThunk => dispatch => {\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\n\n    fetch('https://api.spotify.com/v1/me/playlists', {\n        method: 'GET',\n        headers: myHeaders\n    }).then(response => response.json())\n        .then((data) => {\n            dispatch(setUserPlaylist(data));\n        }).catch((error) => {\n        console.log(error);\n        if (error instanceof XMLHttpRequest) {\n            if (error.status === 401) {\n\n            }\n        }\n    });\n}\n\nexport default playlistsSlice.reducer;"]},"metadata":{},"sourceType":"module"}